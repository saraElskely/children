<?php

namespace TimeBundle\Repository;

use TimeBundle\constant\Roles;
use TimeBundle\Entity\Task;
use TimeBundle\Entity\User;
use TimeBundle\constant\Schedule;
use Doctrine\ORM\Query\Expr;

/**
 * TaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaskRepository extends \Doctrine\ORM\EntityRepository
{
    public function createTask($taskName , $schedule ,$creator)
    {
        $task = new Task();
        $task->setTaskName($taskName)
                ->setCreator($creator)
                ->setSchedule($schedule);
        
        $entityManager = $this->getEntityManager();
        $entityManager->persist($task);
        $entityManager->flush();    
        return $task;
                
    }
    
    public function deleteTask($task_id)
    {
        $this->createQueryBuilder('task')
                ->delete()
                ->where("task.id = $task_id")
                ->getQuery()
                ->execute();
    }

    public function getAdminTasks()
    {
        $adminId = $this->getEntityManager()->getRepository('TimeBundle:User')->getAdminId();
        return $this->createQueryBuilder('task')
                ->select()
                ->where("task.creator = $adminId")
//                ->andWhere("task.schedule = 0 OR task.schedule = $todayAsSchedule")
                ->getQuery()
                ->execute();
        
    }
    
    public function getTodayChildTasks($todayAsSchedule, $motherId)
    {
        $today = new \DateTime();
        $today = $today->format('Y-m-d');

        $adminId = $this->getEntityManager()->getRepository('TimeBundle:User')->getAdminId();
        $SCHEDULE_DAILY = Schedule::SCHEDULE_DAILY;

        return  $this->createQueryBuilder('task')
                ->select('task , schedule.isDone')
                ->leftJoin('TimeBundle:DailySchedule', 'schedule','WITH'," schedule.date = '$today'")
                ->where("task.schedule = $SCHEDULE_DAILY OR task.schedule = $todayAsSchedule")
                ->andWhere("task.creator = $adminId OR task.creator = $motherId")
                ->getQuery()
                ->execute();
    }

    public function getWeeklyChildTasks($startDate, $motherId, $childId)
    { 
        $start = $startDate;
        
        $date = new \DateTime($start);
        $end = $date->modify('+1 week')->format('Y-m-d');
        dump($startDate);
        dump($end);
        $adminId = $this->getEntityManager()->getRepository('TimeBundle:User')->getAdminId();
       
//        SELECT t.* ,s.is_done ,s.date
//        FROM task AS t
//        LEFT JOIN daily_schedule AS s 
//        ON t.id = s.taskId  AND (s.date BETWEEN '2017-07-28' AND '2017-08-04') AND s.userId = 23
//        WHERE t.user IN (10 ,7)
        
        return  $this->createQueryBuilder('task')
                ->select('task, schedule.isDone, schedule.date')
                ->leftJoin('TimeBundle:DailySchedule', 'schedule','WITH',
                        "task.id = schedule.taskInSchedule AND (schedule.date BETWEEN '$start' AND '$end') AND schedule.userInSchedule = $childId")
                ->Where("task.creator IN ($adminId,  $motherId)")
                ->getQuery()
                ->execute();
    
    }

    public function getMotherTasks($motherId)
    {
        return $this->createQueryBuilder('task')
                ->select()
                ->where("task.creator = $motherId")
                ->getQuery()
                ->execute();
    }
    
    public function getAllMothersTasks()
    {
        $role = Roles::ROLE_MOTHER ;
        $subquery = $this->getEntityManager()->getRepository('TimeBundle:User')->createQueryBuilder('user')
                ->select('user.id')
                ->where("user.role = $role")
                ->getDQL();
        
        $qb = $this->createQueryBuilder('task');
        $mothersTasks = $this->createQueryBuilder('task')->select()
                ->where($qb->expr()->in('task.creator', $subquery))
                ->getQuery()
                ->getArrayResult();
        
        return $mothersTasks ;
        
    }
}
