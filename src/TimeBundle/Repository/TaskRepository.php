<?php

namespace TimeBundle\Repository;

use TimeBundle\constant\Roles;
use TimeBundle\Entity\Task;
use TimeBundle\Entity\User;

/**
 * TaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaskRepository extends \Doctrine\ORM\EntityRepository
{
    public function createTask($taskName , $schedule ,$creator)
    {
        $task = new Task();
        $task->setTaskName($taskName)
                ->setCreator($creator)
                ->setSchedule($schedule);
        
        $entityManager = $this->getEntityManager();
        $entityManager->persist($task);
        $entityManager->flush();    
        return $task;
                
    }
    
    public function deleteTask($task_id)
    {
        $this->createQueryBuilder('task')
                ->delete()
                ->where("task.id = $task_id")
                ->getQuery()
                ->execute();
    }

    public function getAdminTasks()
    {
        $admin_id = $this->getEntityManager()->getRepository('TimeBundle:User')->getAdminId();
        return $this->createQueryBuilder('task')
                ->select()
                ->where("task.creator = $admin_id")
                ->getQuery()
                ->execute();
    }
    public function getMotherTasks($mother_id)
    {
        return $this->createQueryBuilder('task')
                ->select()
                ->where("task.creator = $mother_id")
                ->getQuery()
                ->execute();
        
    }
    
    public function getAllMothersTasks()
    {
        $role = Roles::ROLE_MOTHER ;
        $subquery = $this->getEntityManager()->getRepository('TimeBundle:User')->createQueryBuilder('user')
                ->select('user.id')
                ->where("user.role = $role")
                ->getDQL();
        $qb = $this->createQueryBuilder('task');
        $qb->select()
                ->where($qb->expr()->in('task.creator', $subquery))
                ->getQuery()
                ->execute();
        dump($qb);
        die();
        return $qb ;
        
    }
}
