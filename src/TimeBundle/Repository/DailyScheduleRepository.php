<?php

namespace TimeBundle\Repository;

use TimeBundle\Entity\DailySchedule;
use TimeBundle\Exception\TimeBundleException;
use TimeBundle\constant\Exceptions;

/**
 * DailyScheduleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DailyScheduleRepository extends \Doctrine\ORM\EntityRepository
{
    public function getChildDailySchedules($childId)
    {
        return $this->createQueryBuilder('schedule')
                ->select()
                ->where("schedule.userInSchedule = $childId")
                ->orderBy('schedule.date', 'ASC')
                ->getQuery()
                ->execute();
    }
    
    public function getChildTodaySchedule($childId){
        $today = new \DateTime();
        $today = $today->format('Y-m-d');
        
        return  $this->createQueryBuilder('schedule')
                ->select('task.id')
                ->join('schedule.taskInSchedule', 'task')
                ->where("schedule.userInSchedule = $childId")
                ->andWhere("schedule.date = '$today'")
                ->getQuery()
                ->getArrayResult();      
    }
    
    public function createDailySchedule( $child, $task)
    {
        $entityManager = $this->getEntityManager();
        $today = new \DateTime();
//        $child = $entityManager->getReference('TimeBundle:User', $childId);
//        $task = $entityManager->getReference('TimeBundle:Task', $taskId);        
        $dailySchedule = new DailySchedule();
        $dailySchedule->setDate($today)
                ->setTaskInSchedule($task)
                ->setUserInSchedule($child)
                ->setIsDone(TRUE);
              
        $entityManager->persist($dailySchedule);
        $entityManager->flush();    
        return $dailySchedule;
    }
    
    public function deleteSchedule( $childId, $taskId)
    {
        $today = new \DateTime();
        $today = $today->format('Y-m-d');
        
        return $this->createQueryBuilder('schedule')
                ->delete()
                ->where("schedule.userInSchedule = $childId AND schedule.taskInSchedule = $taskId")
                ->andWhere("schedule.date = '$today'")
                ->getQuery()
                ->execute();
        
    }
    
    public function getScheduleId( $childId, $taskId, $date = null)
    {
        if(is_null($date)) {
            $date = new \DateTime();
            $date = $date->format('Y-m-d');
        }
        return $this->createQueryBuilder('schedule')
                ->select('schedule.id')
                ->where("schedule.taskInSchedule = $taskId AND schedule.userInSchedule = $childId")
                ->andWhere("schedule.date = $date")
                ->getQuery()
                ->getOneOrNullResult() ;       
    }
    
//    public function changeScheduleState( $scheduleId, $state)
//    {
//        $today = new \DateTime();
//        $today = $today->format('Y-m-d');
//        
//        return $this->createQueryBuilder('schedule')
//                ->update()
//                ->set('schedule.isDone', $state)
//                ->where("schedule.id = $scheduleId AND schedule.date = '$today'")
//                ->getQuery()
//                ->execute();
//    }
    
    /*
     * return @string date or null
     */
    public function getFirstDataToUser($childId)
    {
        $date = $this->createQueryBuilder('schedule')
                    ->select('MIN(schedule.date)')
                    ->where("schedule.userInSchedule = $childId")
                    ->getQuery()
                    ->getSingleScalarResult();
        return $date;
                    
    }
}
