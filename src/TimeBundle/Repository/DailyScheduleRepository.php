<?php

namespace TimeBundle\Repository;

use TimeBundle\Entity\DailySchedule;

/**
 * DailyScheduleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DailyScheduleRepository extends \Doctrine\ORM\EntityRepository {

    public function getChildDailySchedules($childId) {
        return $this->createQueryBuilder('schedule')
                        ->select()
                        ->where("schedule.userInSchedule = :childId")
                        ->setParameter('childId', $childId)
                        ->orderBy('schedule.date', 'ASC')
                        ->getQuery()
                        ->execute();
    }

    public function getChildTodaySchedule($childId) {
        $today = (new \DateTime())->format('Y-m-d');

        return $this->createQueryBuilder('schedule')
                        ->select('task.id')
                        ->join('schedule.taskInSchedule', 'task')
                        ->where("schedule.userInSchedule = :childId")
                        ->andWhere("schedule.date = :today")
                        ->setParameter('childId', $childId)
                        ->setParameter('today', $today)
                        ->getQuery()
                        ->getArrayResult();
    }

    public function createDailySchedule($child, $task) {
        $entityManager = $this->getEntityManager();

        $dailySchedule = new DailySchedule();
        $dailySchedule->setDate(new \DateTime())
                ->setTaskInSchedule($task)
                ->setUserInSchedule($child)
                ->setIsDone(TRUE);

        $entityManager->persist($dailySchedule);
        $entityManager->flush();
        return $dailySchedule;
    }

    public function deleteSchedule($childId, $taskId) {
        return $this->createQueryBuilder('schedule')
                        ->delete()
                        ->where("schedule.userInSchedule = :childId AND schedule.taskInSchedule = :taskId")
                        ->andWhere("schedule.date = :today")
                        ->setParameter('today', (new \DateTime())->format('Y-m-d'))
                        ->setParameter('taskId', $taskId)
                        ->setParameter('childId', $childId)
                        ->getQuery()
                        ->execute();
    }

    public function getScheduleId($childId, $taskId, $date = null) {
        if (is_null($date)) {
            $date = (new \DateTime())->format('Y-m-d');
        }
        return $this->createQueryBuilder('schedule')
                        ->select('schedule.id')
                        ->where("schedule.taskInSchedule = :taskId AND schedule.userInSchedule = :childId")
                        ->andWhere("schedule.date = :date")
                        ->setParameter('date', $date)
                        ->setParameter('taskId', $taskId)
                        ->setParameter('childId', $childId)
                        ->getQuery()
                        ->getOneOrNullResult();
    }

//    public function changeScheduleState( $scheduleId, $state)
//    {
//        $today = new \DateTime();
//        $today = $today->format('Y-m-d');
//        
//        return $this->createQueryBuilder('schedule')
//                ->update()
//                ->set('schedule.isDone', $state)
//                ->where("schedule.id = $scheduleId AND schedule.date = '$today'")
//                ->getQuery()
//                ->execute();
//    }

    /*
     * return @string date or null
     */
    public function getFirstDataToUser($childId) {
        $date = $this->createQueryBuilder('schedule')
                ->select('MIN(schedule.date)')
                ->where("schedule.userInSchedule = :childId")
                ->setParameter('childId', $childId)
                ->getQuery()
                ->getSingleScalarResult();
        return $date;
    }

}
