<?php

namespace TimeBundle\Repository;

use TimeBundle\Entity\User;
use TimeBundle\constant\Roles;
use Doctrine\ORM\Tools\Pagination\Paginator;
use TimeBundle\Service\PaginatorService;
use Symfony\Component\Config\Definition\Exception\Exception;
use TimeBundle\Exception\TimeBundleException;
use TimeBundle\constant\Exceptions;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    public function getUsersQuery()
    {
        return $this->createQueryBuilder('user')
                  ->select();

    }
    public function getUsers($query, $offest =1, $limit=2)
    {
        return $query
                ->setFirstResult($offest)
                ->setMaxResults($limit)
                ->getQuery()
                ->getArrayResult();       
    }
    public function getFilteredUsers($username, $role)
    {
        $query = $this->createQueryBuilder('user')->select();
        if(!is_null($username) && $username !== ''){
            $query->where("user.username LIKE '%$username%'");
        }
        if(  in_array($role, Roles::ROLE_ARRAY,TRUE) ) {
            $query->andWhere("user.role = $role");
        } 
        elseif ($role !== null) {
            throw new TimeBundleException(Exceptions::CODE_ROLE_NOT_FOUND);
        }
        return $query;
    }
    public function getQueryCount($query)
    {
        $alias =  $query->getRootAliases();
//        dump($alias[0]);
//        die;       
        $q = clone $query;
        return $q
                ->select("count($alias[0].id)")
                ->getQuery()
                ->getSingleScalarResult()
                ;      
    }

    public function getAdminId()
    {
        $adminUsername = 'admin' ;
        $admin = $this->createQueryBuilder('user')
                ->select()
                ->where("user.username = '$adminUsername'")
                ->getQuery()
                ->execute();
        
        return $admin[0]->getId();
    }
    
    public function getMotherId($childId)
    {
        $mother = $this->createQueryBuilder('user')
                        ->select('mother.id')
                        ->where("user.id =$childId")
                        ->join('user.mother', 'mother')
                        ->getQuery()
                        ->execute();
//                dump($mother[0]['id']);
//                die();
        if(!isset( $mother[0])) 
            throw new TimeBundleException(Exceptions::CODE_NOT_CHILD_USER) ;
        
        return $mother[0]['id'];
    }

    public function createAdminUser($encodedPassword)
    {
        $admin = new User();
        
        $admin->setUsername('admin')
                ->setRole(Roles::ROLE_ADMIN)
                ->setAge(30)
                ->setFname('admin')
                ->setLname('admin')
                ->setPassword($encodedPassword);

        $entityManager = $this->getEntityManager();
        $entityManager->persist($admin);
        $entityManager->flush();

        return $admin;
    }
    
    public function createUser($username ,$fname ,$lname ,$encodedPassword ,$role ,$age,User $mother = null)
    {
        $user = new User();
        $user->setAge($age)
                ->setFname($fname)
                ->setLname($lname)
                ->setPassword($encodedPassword)
                ->setRole($role)
                ->setUsername($username)
                ->setMother($mother);
        
        $entityManager = $this->getEntityManager();
        $entityManager->persist($user);
        $entityManager->flush();
    }
    
    public function getUser($userId)
    {
        $user = $this->createQueryBuilder('user')
                ->select()
                ->where("user.id = $userId")
                ->getQuery()
                ->getOneOrNullResult();
        if(is_null($user)) {
            throw new TimeBundleException(Exceptions::CODE_USER_NOT_FOUND);
        } else {
            return $user;
        }
           
    }
    
    public function deleteUser($userId)
    {
        $this->createQueryBuilder('user')
                ->delete()
                ->where("user.id = $userId")
                ->getQuery()
                ->execute();
    }
    
    public function getMotherChildrenId($motherId)
    {
        return $this->createQueryBuilder('user')
                ->select('user.id')
                ->where("user.mother = $motherId")
                ->getQuery()
                ->execute();      
    }
    public function getChildren($motherId)
    {
        $children =  $this->createQueryBuilder('user')
                ->select()
                ->where("user.mother = $motherId")
                ->getQuery()
                ->execute();
        if(! isset($children[0])) {
            throw new Exception('children not found');
        }
        return $children;
    }
    public function checkMotherId($motherId)
    {
        $role = Roles::ROLE_MOTHER;
        $mother = $this->createQueryBuilder('user')
                ->select()
                ->where("user.id = $motherId AND user.role = $role")
                ->getQuery()
                ->execute();
        
        if(!isset( $mother[0])) 
            throw new Exception('Mother not found ') ;
        return TRUE;
    }

    public function getMothers()
    {
        $role = Roles::ROLE_MOTHER;
        $mothers = $this->createQueryBuilder('user')
                ->select()
                ->where("user.role = $role")
                ->getQuery()
                ->execute();       

        return $mothers ;
    }
    
    public function search($name)
    {
        return $this->createQueryBuilder('user')
                ->where("user.username LIKE '%$name%'")
                ->orWhere("user.fname LIKE '%$name%'")
                ->orWhere("user.lname LIKE '%$name%'")
                ->getQuery()
                ->getResult();
    }

}
